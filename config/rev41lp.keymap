/*
 * Copyright (c) 2024 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define ADJST   3
#define S_SECT GRAVE // §
#define S_PLUS MINUS // +
#define S_ACUT EQUAL // ´ (dead)
#define S_ARNG LBRC  // Å
#define S_DIAE RBRC  // ¨ (dead)
#define S_ODIA SEMI  // Ö
#define S_ADIA SQT   // Ä
#define S_QUOT NUHS  // '
#define S_LABK NUBS  // <
#define S_MINS FSLH  // -
#define S_EXLM LS(N1)     // !
#define S_DQUO LS(N2)     // "
#define S_HASH LS(N3)     // #
#define S_CURR LS(N4)     // ¤
#define S_PERC LS(N5)     // %
#define S_AMPR LS(N6)     // &
#define S_SLSH LS(N7)     // /
#define S_LPRN LS(N8)     // (
#define S_RPRN LS(N9)     // )
#define S_EQL  LS(N0)     // =
#define S_QUES LS(MINUS) // ?
#define S_GRV  LS(EQUAL) // ` (dead)
#define S_CIRC LS(RBRC) // ^ (dead)
#define S_ASTR LS(S_QUOT) // *
#define S_RABK LS(S_LABK) // >
#define S_AT   RA(N2)     // @
#define S_PND  RA(N3)     // £
#define S_DLR  RA(N4)     // $
#define S_EURO RA(N5)     // €
#define S_LCBR RA(N7)     // {
#define S_LBRC RA(N8)     // [
#define S_RBRC RA(N9)     // ]
#define S_RCBR RA(N0)     // }
#define S_BSLS RA(MINUS) // (backslash)
#define S_TILD RA(RBRC) // ~ (dead)
#define S_PIPE RA(S_LABK) // |
#define WLEFT  LC(LEFT)
#define WRIGHT LC(RIGHT)

/ {
    behaviors {
        sh_cl: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LSHIFT>, <&kp CAPSLOCK>;
        };
    };

    cond_layers {
        compatible = "zmk,conditional-layers";

        tri {
            if-layers = <LOWER RAISE>;
            then-layer = <ADJST>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------
            // |  ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U  |  I  |  O  |  P  |  Å  |
            // | BSPS |  A  |  S  |  D  |  F  |  G  |   |  H  |  J  |  K  |  L  |  Ö  |  Ä  |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M  |  ,  |  .  |  -  |  '  |
            //                          | DEL | LWR |SPC| RSE | TAB |

            bindings = <
&lt RAISE ESC   &kp Q          &kp W           &kp E          &kp R         &kp T
&kp Y           &kp U          &kp I           &kp O          &kp P         &kp LBRC
&mt LCTRL BSPC  &kp A          &kp S           &kp D          &kp F         &kp G
&kp H           &kp J          &kp K           &kp L          &kp S_ODIA    &mt RCTRL S_ADIA
&sh_cl          &kp Z          &kp X           &kp C          &kp V         &kp B
&kp N           &kp M          &kp COMMA       &kp DOT        &kp S_MINS    &mt RSHIFT S_QUOT
&mt LALT DEL    &lt LOWER RET  &mt LGUI SPACE  &lt RAISE RET  &mt RALT TAB
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------
            // |     |  !  |  @  |  {  |  }  |  |  |   |  £  |  €  |  ?  |  §  |  ¤  |  ¨  |
            // |     |  #  |  $  |  (  |  )  |  `  |   |  +  |  -  |  /  |  *  |  %  |  "  |
            // |     |  %  |  ^  |  [  |  ]  |  ~  |   |  &  |  =  |  <  |  >  |  \  |  ´  |
            //                         |     |     |   | ADJ |     |

            bindings = <
&trans      &kp S_EXLM  &kp S_AT    &kp S_LCBR  &kp S_RCBR  &kp S_PIPE
&kp S_PND   &kp S_EURO  &kp S_QUES  &kp GRAVE  &kp S_CURR  &kp RBRC
&trans      &kp S_HASH  &kp S_DLR   &kp S_LPRN  &kp S_RPRN  &kp S_GRV
&kp MINUS  &kp S_MINS  &kp S_SLSH  &kp S_ASTR  &kp S_PERC  &kp S_DQUO
&trans      &kp S_PERC  &kp S_CIRC  &kp S_LBRC  &kp S_RBRC  &kp S_TILD
&kp S_AMPR  &kp S_EQL   &kp S_LABK  &kp S_RABK  &kp S_BSLS  &kp EQUAL
&trans      &trans      &trans      &trans      &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------
            // |  §   |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | MUTE |
            // |  F1  |  F2 |  F3 |  F4 |  F5 |  F6 |   | LEFT| DOWN|  UP | RGHT| PGUP| VOL+ |
            // |  F7  |  F8 |  F9 | F10 | F11 | F12 |   |WLEFT|WRGHT| HOME| END | PGDN| VOL- |
            //                          |     | ADJ |   |    |     |

            bindings = <
&kp GRAVE    &kp N1         &kp N2    &kp N3     &kp N4     &kp N5
&kp N6        &kp N7         &kp N8    &kp N9     &kp N0     &kp C_MUTE
&kp F1        &kp F2         &kp F3    &kp F4     &kp F5     &kp F6
&kp LEFT      &kp DOWN       &kp UP    &kp RIGHT  &kp PG_UP  &kp C_VOL_UP
&kp F7        &kp F8         &kp F9    &kp F10    &kp F11    &kp F12
&kp LC(LEFT)  &kp LC(RIGHT)  &kp HOME  &kp END    &kp PG_DN  &kp C_VOL_DN
&trans        &trans         &trans    &trans     &trans
            >;
        };

        adjust_layer {
            // ------------------------------------------------------------------------------
            // |     |     |     | BL- | BLT | BL+ |   | BT1 | BT2 | BT3 | BT4 | BT5 |BT CLR|
            // |     |     |     |     |     |     |   |     |     |     |     |     |      |
            // |     |     |     |     |     |     |   |RESET|     |     |     |     |      |
            //                         |     |     |   |     |     |

            bindings = <
&none         &none         &none         &bl BL_DEC    &bl BL_TOG    &bl BL_INC
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
&none         &none         &none         &bl BL_OFF    &none         &bl BL_ON
&bt BT_PRV    &bt BT_NXT    &out OUT_BLE  &none         &none         &none
&none         &none         &none         &none         &none         &bootloader
&sys_reset    &none         &out OUT_USB  &none         &none         &none
&trans        &trans        &trans        &trans        &trans
            >;
        };
    };
};
